# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/dfs_service/distributedfile.gni")

ohos_unittest("cloud_disk_data_convertor_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sdk_helper_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "cloud_disk_data_convertor_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("album_data_handler_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sdk_helper_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/system_load.cpp",
    "album_data_handler_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${services_path}/cloudsyncservice/include/sync_rule",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("data_sync_manager_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_rdb_store_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sdk_helper_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/system_load.cpp",
    "data_sync_manager_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${services_path}/cloudsyncservice/include/sync_rule",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [ "private=public" ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("data_handler_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "data_handler_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [ "private=public" ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("data_convertor_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "data_convertor_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
  ]

  defines = [ "private=public" ]

  use_exceptions = true
}

ohos_unittest("file_data_handler_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "file_data_handler_test.cpp",
  ]

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
  ]

  defines = [
    "private=public",
    "protected=public",
  ]

  use_exceptions = true
}

ohos_unittest("gallery_data_syncer_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "gallery_data_syncer_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("data_syncer_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_download_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_rdb_store_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sdk_helper_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sync_state_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/task_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/system_load.cpp",
    "data_syncer_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${services_path}/cloudsyncservice/include/ipc",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${services_path}/cloudsyncservice/include/sync_rule",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "protected=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("file_data_convertor_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "file_data_convertor_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"DATA_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("sdk_helper_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_container_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_database_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/drive_kit_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_sync_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/cloud_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/network_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "sdk_helper_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("sdk_helper_unnormal_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_rdb_store_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_assets_downloader_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_database_unnormal_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/drive_kit_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_sync_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/cloud_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/network_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "sdk_helper_unnormal_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("sync_state_manager_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "sync_state_manager_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "relational_store:native_rdb",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  use_exceptions = true
}

ohos_unittest("task_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_database_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/drive_kit_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_sync_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/cloud_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/network_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "task_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  sources += cloud_disk_sync

  include_dirs = [
    "${clouddisk_database_path}/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("cloud_disk_data_syncer_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/drive_kit_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sdk_helper_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_sync_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/cloud_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/network_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "cloud_disk_data_syncer_test.cpp",
  ]

  cloud_disk_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_convertor.cpp",
  ]

  cloudsync_kit_inner = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_download_callback_client.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_download_callback_stub.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_download_uri_manager.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_callback_client.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_callback_stub.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner_lite/src/cloud_sync_service_proxy_lite.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner_lite/src/cloud_sync_manager_lite.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner_lite/src/cloud_sync_manager_impl_lite.cpp",
  ]

  clouddisk_database = [
    "${clouddisk_database_path}/src/clouddisk_rdbstore.cpp",
    "${clouddisk_database_path}/src/file_column.cpp",
    "${clouddisk_database_path}/src/clouddisk_rdb_utils.cpp",
    "${clouddisk_database_path}/src/clouddisk_sync_helper.cpp",
    "${services_path}/clouddisk_database/src/clouddisk_notify_utils.cpp",
    "${services_path}/clouddisk_database/src/clouddisk_notify.cpp",
    "${services_path}/clouddisk_database/src/clouddisk_rdb_transaction.cpp",
  ]

  sources += cloud_disk_sync
  sources += cloudsync_kit_inner
  sources += clouddisk_database

  include_dirs = [
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${clouddisk_database_path}/include",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/include",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner_lite/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  sources += medialibrary_rdb_utils_source
  include_dirs += medialibrary_rdb_utils_include

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/e2fsprogs:libext2_uuid",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  use_exceptions = true
}

ohos_unittest("cloud_disk_data_handler_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${distributedfile_path}/cfi_blocklist.txt"
  }

  module_out_path = "filemanagement/dfs_service"
  data_sync = [
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_notifier.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer_rdb_store.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task_state_manager.cpp",
  ]

  gallery_data_sync = [ "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp" ]

  medialibrary_rdb_utils_source = [
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_transaction.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_rdb_utils.cpp",
  ]

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_database.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/drive_kit.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/mock/clouddisk_notify_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_disk_data_convertor_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_file_utils_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_file_utils_mock.h",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_pref_impl_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/medialibrary_business_record_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_album_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/photo_map_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/cloud_disk_data_sync/cloud_disk_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status_listener.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/cloud_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/net_conn_callback_observer.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/network_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/screen_status_listener.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/system_load.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/user_status_listener.cpp",
    "cloud_disk_data_handler_test.cpp",
  ]

  sources += data_sync
  sources += gallery_data_sync
  sources += medialibrary_rdb_utils_source

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/cycle_task",
    "${services_path}/cloudsyncservice/include/cycle_task/tasks",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/cloud_disk_data_sync",
    "${services_path}/cloudsyncservice/include/transport",
    "${services_path}/cloudsyncservice/include/transport/softbus",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${services_path}/cloudsyncservice/include/sync_rule",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${clouddisk_database_path}/include",
    "${utils_path}/cloud_disk/include",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock",
    "${innerkits_native_path}/cloudsync_kit_inner",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
    "//third_party/e2fsprogs/e2fsprogs/lib",
  ]

  medialibrary_rdb_utils_include = [ "${media_library_path}/frameworks/innerkitsimpl/medialibrary_data_extension/include" ]

  include_dirs += medialibrary_rdb_utils_include

  resource_config_file =
      "${distributedfile_path}/test/unittests/resource/ohos_test.xml"

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  ldflags = [ "--coverage" ]

  cflags_cc = [ "--coverage" ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "libfuse:libfuse",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "relational_store:native_rdb",
  ]

  defines = [
    "private=public",
    "protected=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  if (cloudsync_service_resource_schedule) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "CLOUDSYNC_SERVICE_RESOURCE_SCHEDULE" ]
  }
  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  use_exceptions = true
}

group("cloudsync_sa_data_sync_test") {
  testonly = true
  deps = [
    ":album_data_handler_test",
    ":cloud_disk_data_convertor_test",
    ":cloud_disk_data_syncer_test",
    ":data_convertor_test",
    ":data_handler_test",
    ":data_sync_manager_test",
    ":data_syncer_test",
    ":file_data_convertor_test",
    ":file_data_handler_test",
    ":sdk_helper_test",
    ":sync_state_manager_test",
    ":task_test",
  ]
}

# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/dfs_service/distributedfile.gni")

ohos_unittest("data_sync_manager_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/data_syncer_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/sdk_helper_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "data_sync_manager_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [ "private=public" ]

  use_exceptions = true
}

ohos_unittest("data_handler_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "data_handler_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [ "private=public" ]

  use_exceptions = true
}

ohos_unittest("data_convertor_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "data_convertor_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [ "private=public" ]

  use_exceptions = true
}

ohos_unittest("file_data_handler_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "file_data_handler_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [ "private=public" ]

  use_exceptions = true
}

ohos_unittest("gallery_data_syncer_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "gallery_data_syncer_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  use_exceptions = true
}

ohos_unittest("data_syncer_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/battery_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_status_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_sync_callback_manager_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/network_status_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "data_syncer_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include/ipc",
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [
    "private=public",
    "protected=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  use_exceptions = true
}

ohos_unittest("file_data_convertor_test") {
  module_out_path = "filemanagement/dfs_service"

  sources = [
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "file_data_convertor_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  if (!dfs_service_feature_enable_cloud_adapter) {
    deps += [
      "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    ]
  } else {
    external_deps += [ "drivekit_native:drivekit" ]
  }

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"DATA_SYNC_TEST\"",
  ]

  use_exceptions = true
}

ohos_unittest("sdk_helper_test") {
  module_out_path = "filemanagement/dfs_service"
  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_assets_downloader.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_record_field.cpp",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_database_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/drive_kit_mock.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/base_column.cpp",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/src/media_column.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_sync_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/album_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_convertor.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/file_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/gallery_data_sync/gallery_data_syncer.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/rdb_data_handler.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sdk_helper.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/sync_state_manager.cpp",
    "${services_path}/cloudsyncservice/src/data_sync/task.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_download_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/ipc/cloud_sync_callback_manager.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/battery_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/cloud_status.cpp",
    "${services_path}/cloudsyncservice/src/sync_rule/network_status.cpp",
    "sdk_helper_test.cpp",
  ]

  include_dirs = [
    "${services_path}/cloudsyncservice/include",
    "${services_path}/cloudsyncservice/include/data_sync",
    "${services_path}/cloudsyncservice/include/data_sync/gallery_data_sync",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${media_library_path}/frameworks/services/media_thumbnail/include",
    "${media_library_path}/frameworks/utils/include",
  ]

  deps = [
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
    "relational_store:native_rdb",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004310",
    "LOG_TAG=\"CLOUD_SYNC_TEST\"",
  ]

  use_exceptions = true
}

group("cloudsync_sa_data_sync_test") {
  testonly = true
  deps = [
    ":data_convertor_test",
    ":data_handler_test",
    ":data_sync_manager_test",
    ":data_syncer_test",
    ":file_data_convertor_test",
    ":file_data_handler_test",
    ":gallery_data_syncer_test",
    ":sdk_helper_test",
  ]
}

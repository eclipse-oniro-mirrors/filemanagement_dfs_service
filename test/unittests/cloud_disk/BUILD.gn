# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/dfs_service/distributedfile.gni")

ohos_unittest("account_status_listener_test") {
  module_out_path = "filemanagement/dfs_service"

  include_dirs = [
    "${distributedfile_path}/utils/log/include",
    "${services_path}/cloudfiledaemon/include/cloud_disk/",
  ]

  sources = [
    "${services_path}/cloudfiledaemon/src/cloud_disk/account_status.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/account_status_listener.cpp",
    "account_status_listener_test.cpp",
  ]

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "common_event_service:cesfwk_innerkits",
    "hilog:libhilog",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004308",
    "LOG_TAG=\"CLOUD_DAEMON_API\"",
  ]

  use_exceptions = true
}

ohos_unittest("file_operations_cloud_test") {
  module_out_path = "filemanagement/dfs_service"

  include_dirs = [
    "${distributedfile_path}/adapter/cloud_adapter_example/include",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner",
    "${distributedfile_path}/utils/log/include",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include",
    "${media_library_path}/frameworks/utils/include",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include",
    "${services_path}/clouddisk_database/include",
    "${services_path}/cloudfiledaemon/include/cloud_disk/",
    "mock",
  ]

  sources = [
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_asset_read_session.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_container.cpp",
    "${distributedfile_path}/adapter/cloud_adapter_example/src/dk_error.cpp",
    "${distributedfile_path}/test/mock/clouddisk_notify_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/cloud_file_utils_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/dk_database_mock.cpp",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/drive_kit_mock.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/account_status.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/database_manager.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/file_operations_base.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/file_operations_cloud.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/file_operations_helper.cpp",
    "file_operations_cloud_test.cpp",
    "mock/clouddisk_rdbstore_mock.cpp",
    "mock/libfuse_mock.cpp",
    "mock/system_function_mock.cpp",
  ]

  deps = [
    "${clouddisk_database_path}:clouddisk_database",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:dataobs_manager",
    "common_event_service:cesfwk_innerkits",
    "ffrt:libffrt",
    "hilog:libhilog",
    "libfuse:libfuse",
    "relational_store:native_rdb",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004308",
    "LOG_TAG=\"CLOUD_DAEMON_API\"",
  ]

  use_exceptions = true
}

ohos_unittest("database_manager_test") {
  module_out_path = "filemanagement/dfs_service"

  include_dirs = [
    "${distributedfile_path}/utils/log/include",
    "${distributedfile_path}/interfaces/inner_api/native/cloudsync_kit_inner/",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/include/",
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner_lite/include/",
    "${services_path}/cloudfiledaemon/include/cloud_disk/",
    "${services_path}/clouddisk_database/include/",
    "${media_library_path}/frameworks/innerkitsimpl/media_library_helper/include/",
    "${media_library_path}/interfaces/inner_api/media_library_helper/include/",
    "${media_library_path}/frameworks/utils/include/",
  ]

  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_manager.cpp",
    "${services_path}/clouddisk_database/src/clouddisk_rdb_transaction.cpp",
    "${services_path}/clouddisk_database/src/clouddisk_rdbstore.cpp",
    "${services_path}/clouddisk_database/src/clouddisk_sync_helper.cpp",
    "${services_path}/clouddisk_database/src/file_column.cpp",
    "${services_path}/cloudfiledaemon/src/cloud_disk/database_manager.cpp",
    "database_manager_test.cpp",
  ]

  deps = [
    "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter",
    "${innerkits_native_path}/cloudsync_kit_inner:cloudsync_kit_inner_lite",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
    "${utils_path}:libdistributedfileutils_lite",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:dataobs_manager",
    "common_event_service:cesfwk_innerkits",
    "dfs_service:cloudsync_kit_inner",
    "hilog:libhilog",
    "ipc:ipc_single",
    "libfuse:libfuse",
    "relational_store:native_rdb",
  ]

  defines = [
    "private=public",
    "LOG_DOMAIN=0xD004308",
    "LOG_TAG=\"CLOUD_DAEMON_API\"",
  ]

  use_exceptions = true
}

group("cloud_disk_test") {
  testonly = true

  deps = [
    ":account_status_listener_test",
  ]
}

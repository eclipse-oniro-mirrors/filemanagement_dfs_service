# Copyright (C) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")
import("//foundation/filemanagement/dfs_service/distributedfile.gni")

ohos_shared_library("libdistributedfiledaemon") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  include_dirs = [
    "include",
    "include/network/softbus",
    "${distributedfile_path}/frameworks/native/distributed_file_inner/include",
    "${distributedfile_path}/services/distributedfiledaemon/include/ipc",
  ]

  sources = [
    "src/device/device_info.cpp",
    "src/device/device_manager_agent.cpp",
    "src/ipc/connection_detector.cpp",
    "src/ipc/daemon.cpp",
    "src/ipc/daemon_stub.cpp",
    "src/ipc/file_trans_listener_proxy.cpp",
    "src/ipc/trans_mananger.cpp",
    "src/mountpoint/mount_manager.cpp",
    "src/mountpoint/mount_point.cpp",
    "src/multiuser/os_account_observer.cpp",
    "src/network/devsl_dispatcher.cpp",
    "src/network/kernel_talker.cpp",
    "src/network/network_agent_template.cpp",
    "src/network/session_pool.cpp",
    "src/network/softbus/softbus_agent.cpp",
    "src/network/softbus/softbus_file_receive_listener.cpp",
    "src/network/softbus/softbus_file_send_listener.cpp",
    "src/network/softbus/softbus_handler.cpp",
    "src/network/softbus/softbus_session.cpp",
    "src/network/softbus/softbus_session_dispatcher.cpp",
    "src/network/softbus/softbus_session_listener.cpp",
    "src/network/softbus/softbus_session_pool.cpp",
  ]

  deps = [
    "${services_path}/distributedfiledaemon:distributed_file_daemon_kit_inner",
    "${utils_path}:libdistributedfileutils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:uri_permission_mgr",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:sandbox_helper_native",
    "common_event_service:cesfwk_innerkits",
    "dataclassification:data_transit_mgr",
    "device_auth:deviceauth_sdk",
    "device_manager:devicemanagersdk",
    "dsoftbus:softbus_client",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  configs = [ "${utils_path}:compiler_configs" ]

  defines = [ "LOG_TAG=\"distributedfile_daemon\"" ]

  part_name = "dfs_service"
  subsystem_name = "filemanagement"
}

config("public_config") {
  include_dirs = [
    ".",
    "${distributedfile_path}/frameworks/native/distributed_file_inner/include",
    "${distributedfile_path}/services/distributedfiledaemon/include/ipc",
  ]
}

config("private_config") {
  include_dirs = [
    "${distributedfile_path}/frameworks/native/distributed_file_inner/include",
    "${distributedfile_path}/utils/log/include",
    "${services_path}/distributedfiledaemon/include",
  ]
}

ohos_shared_library("distributed_file_daemon_kit_inner") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  sources = [
    "${distributedfile_path}/frameworks/native/distributed_file_inner/src/distributed_file_daemon_manager.cpp",
    "${distributedfile_path}/frameworks/native/distributed_file_inner/src/distributed_file_daemon_manager_impl.cpp",
    "${distributedfile_path}/frameworks/native/distributed_file_inner/src/distributed_file_daemon_proxy.cpp",
    "${distributedfile_path}/frameworks/native/distributed_file_inner/src/file_trans_listener_stub.cpp",
    "${distributedfile_path}/utils/log/src/utils_log.cpp",
  ]

  defines = [ "LOG_TAG=\"distributedfile_daemon\"" ]

  configs = [ ":private_config" ]

  public_configs = [ ":public_config" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "media_library:media_library",
    "media_library:media_library_manager",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  public_external_deps = [ "device_manager:devicemanagersdk" ]

  use_exceptions = true
  innerapi_tags = [ "platformsdk" ]
  part_name = "dfs_service"
  subsystem_name = "filemanagement"
}

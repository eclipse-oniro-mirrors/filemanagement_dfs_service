# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")
import("//foundation/filemanagement/dfs_service/distributedfile.gni")
config("optimize-size") {
  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-Oz",
  ]
  cflags_cc = [
    "-fvisibility-inlines-hidden",
    "-Oz",
  ]
}

config("cloud_sync_service_public_config") {
  include_dirs = [ "${target_gen_dir}" ]
}

idl_gen_interface("cloud_sync_service_interface") {
  sources = [ "ICloudSyncService.idl" ]
}

ohos_source_set("cloud_sync_service_proxy") {
  configs = [ ":optimize-size" ]
  public_configs = [ ":cloud_sync_service_public_config" ]
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "${distributedfile_path}/utils/log/include",
    "${innerkits_native_path}/cloudsync_kit_inner",
  ]

  output_values = get_target_outputs(":cloud_sync_service_interface")
  sources = filter_include(output_values, [ "*_proxy.cpp" ])
  sources += [ "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp" ]

  deps = [ ":cloud_sync_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
  part_name = "dfs_service"
  subsystem_name = "filemanagement"
}

ohos_source_set("cloud_sync_service_stub") {
  configs = [ ":optimize-size" ]
  public_configs = [ ":cloud_sync_service_public_config" ]
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "${distributedfile_path}/utils/log/include",
    "${innerkits_native_path}/cloudsync_kit_inner",
  ]

  output_values = get_target_outputs(":cloud_sync_service_interface")
  sources = filter_include(output_values, [ "*_stub.cpp" ])
  sources += [ "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp" ]

  deps = [ ":cloud_sync_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
  part_name = "dfs_service"
  subsystem_name = "filemanagement"
}

ohos_shared_library("cloudsync_sa") {
  branch_protector_ret = "pac_ret"
  configs = [ ":optimize-size" ]
  public_configs = [ ":cloud_sync_service_public_config" ]
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  include_dirs = [
    "include",
    "include/cycle_task",
    "include/cycle_task/tasks",
    "include/ipc",
    "include/transport",
    "include/transport/softbus",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${innerkits_native_path}/cloudsync_kit_inner",
  ]

  cycle_task = [
    "src/cycle_task/cycle_task.cpp",
    "src/cycle_task/cycle_task_runner.cpp",
    "src/cycle_task/tasks/optimize_cache_task.cpp",
    "src/cycle_task/tasks/optimize_storage_task.cpp",
    "src/cycle_task/tasks/periodic_check_task.cpp",
    "src/cycle_task/tasks/report_statistics_task.cpp",
    "src/cycle_task/tasks/save_subscription_task.cpp",
    "src/cycle_task/tasks/database_backup_task.cpp",
  ]

  transport = [
    "src/transport/file_transfer_manager.cpp",
    "src/transport/message_handler.cpp",
    "src/transport/softbus/session_manager.cpp",
    "src/transport/softbus/softbus_adapter.cpp",
    "src/transport/softbus/softbus_session.cpp",
  ]

  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "src/ipc/account_status_listener.cpp",
    "src/ipc/cloud_sync_service.cpp",
    "src/ipc/download_asset_callback_manager.cpp",
    "src/ipc/download_asset_callback_proxy.cpp",
    "src/sync_rule/battery_status_listener.cpp",
    "src/sync_rule/screen_status_listener.cpp",
    "src/sync_rule/user_status_listener.cpp",
  ]

  sources += cycle_task
  sources += transport

  output_values = get_target_outputs(":cloud_sync_service_interface")
  sources += filter_include(output_values, [ "*_stub.cpp" ])

  defines = [
    "LOG_DOMAIN=0xD004307",
    "LOG_TAG=\"CLOUDSYNC_SA\"",
  ]

  deps = [
    ":cloud_sync_service_interface",
    "${clouddisk_database_path}:clouddisk_database",
    "${innerkits_native_path}/cloud_file_kit_inner:cloudfile_kit",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "app_file_service:sandbox_helper_native",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libfuse:libfuse",
    "memmgr:memmgrclient",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (support_thermal_manager) {
    external_deps += [ "bundle_framework:appexecfwk_base" ]
    external_deps += [ "thermal_manager:thermalmgr_listener" ]
    external_deps += [ "thermal_manager:thermalsrv_client" ]
    defines += [ "support_thermal_manager" ]
  }

  use_exceptions = true
  part_name = "dfs_service"
  subsystem_name = "filemanagement"
}

ohos_static_library("cloudsync_sa_static") {
  branch_protector_ret = "pac_ret"
  public_configs = [ ":cloud_sync_service_public_config" ]
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  include_dirs = [
    "include",
    "include/cycle_task",
    "include/cycle_task/tasks",
    "include/ipc",
    "include/transport",
    "include/transport/softbus",
    "${clouddisk_database_path}/include",
    "${services_path}/cloudfiledaemon/include/cloud_disk",
    "${innerkits_native_path}/cloudsync_kit_inner",
    "${distributedfile_path}/test/unittests/cloudsync_sa/mock/",
  ]

  cycle_task = [
    "src/cycle_task/cycle_task.cpp",
    "src/cycle_task/cycle_task_runner.cpp",
    "src/cycle_task/tasks/optimize_cache_task.cpp",
    "src/cycle_task/tasks/optimize_storage_task.cpp",
    "src/cycle_task/tasks/periodic_check_task.cpp",
    "src/cycle_task/tasks/report_statistics_task.cpp",
    "src/cycle_task/tasks/save_subscription_task.cpp",
    "src/cycle_task/tasks/database_backup_task.cpp",
  ]

  transport = [
    "src/transport/file_transfer_manager.cpp",
    "src/transport/message_handler.cpp",
    "src/transport/softbus/session_manager.cpp",
    "src/transport/softbus/softbus_adapter.cpp",
    "src/transport/softbus/softbus_session.cpp",
  ]

  sources = [
    "${distributedfile_path}/frameworks/native/cloudsync_kit_inner/src/cloud_sync_common.cpp",
    "src/ipc/cloud_sync_service.cpp",
    "src/ipc/download_asset_callback_manager.cpp",
    "src/ipc/download_asset_callback_proxy.cpp",
    "src/sync_rule/battery_status_listener.cpp",
    "src/sync_rule/screen_status_listener.cpp",
    "src/sync_rule/user_status_listener.cpp",
  ]

  sources += cycle_task
  sources += transport

  output_values = get_target_outputs(":cloud_sync_service_interface")
  sources += filter_include(output_values, [ "*_stub.cpp" ])

  defines = [
    "LOG_DOMAIN=0xD004307",
    "LOG_TAG=\"CLOUDSYNC_SA\"",
  ]

  deps = [
    ":cloud_sync_service_interface",
    "${clouddisk_database_path}:clouddisk_database",
    "${innerkits_native_path}/cloud_file_kit_inner:cloudfile_kit",
    "${utils_path}:libdistributedfiledentry",
    "${utils_path}:libdistributedfileutils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:dataobs_manager",
    "app_file_service:sandbox_helper_native",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "e2fsprogs:libext2_uuid",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libfuse:libfuse",
    "memmgr:memmgrclient",
    "netmanager_base:net_conn_manager_if",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "preferences:native_preferences",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (cloudsync_service_hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  deps +=
      [ "${distributedfile_path}/adapter/cloud_adapter_example:cloud_adapter" ]

  if (support_thermal_manager) {
    external_deps += [ "bundle_framework:appexecfwk_base" ]
    external_deps += [ "thermal_manager:thermalmgr_listener" ]
    external_deps += [ "thermal_manager:thermalsrv_client" ]
    defines += [ "support_thermal_manager" ]
  }

  if (cloudsync_service_power) {
    external_deps += [ "battery_manager:batterysrv_client" ]
    defines += [ "SUPPORT_POWER" ]
  }

  if (is_emulator) {
    defines += [ "EMULATOR" ]
  }

  use_exceptions = true
  part_name = "dfs_service"
  subsystem_name = "filemanagement"
}
